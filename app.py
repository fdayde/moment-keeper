"""Application Streamlit pour MomentKeeper."""

import tkinter as tk
from datetime import datetime, timedelta
from pathlib import Path
from tkinter import filedialog
from typing import Dict, List, Tuple

import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import streamlit as st

from src.moment_keeper.organizer import OrganisateurPhotos

# üé® Palette couleurs T-Rex Pastel
PRIMARY = "#E8F4F8"  # Bleu pastel doux (ciel pr√©historique)
SECONDARY = "#F9F2E7"  # Beige/cr√®me chaleureux (sable ancien)
ACCENT = "#D4C5B9"  # Taupe ros√© (terre pr√©historique)
SUCCESS = "#C8E6C9"  # Vert pastel (T-Rex amical)
WARNING = "#FFE0B2"  # Orange pastel
ERROR = "#FFCDD2"  # Rose pastel
TEXT_DARK = "#2C3E50"  # Bleu marine doux
TEXT_LIGHT = "#7F8C8D"  # Gris √©l√©gant

# üéÆ T-Rex Achievements
TREX_ACHIEVEMENTS = {
    "ü¶ñ Baby T-Rex": "Premi√®re photo organis√©e",
    "ü¶ñ T-Rex Adolescent": "100 photos organis√©es",
    "ü¶ñ T-Rex Adulte": "1000 photos organis√©es",
    "ü¶ñ T-Rex L√©gendaire": "365 jours cons√©cutifs",
    "ü¶ñ Roi des T-Rex": "5000 photos organis√©es",
    "ü¶ñ T-Rex Flamboyant": "10000 photos organis√©es",
}

# üé® CSS Custom T-Rex Pastel
TREX_CSS = f"""
<style>
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap');

/* Variables CSS pour coh√©rence */
:root {{
    --primary: {PRIMARY};
    --secondary: {SECONDARY};
    --accent: {ACCENT};
    --success: {SUCCESS};
    --warning: {WARNING};
    --error: {ERROR};
    --text-dark: {TEXT_DARK};
    --text-light: {TEXT_LIGHT};
}}

/* Styles globaux */
.main {{
    font-family: 'Poppins', sans-serif;
    background: linear-gradient(135deg, {PRIMARY} 0%, {SECONDARY} 100%);
    min-height: 100vh;
}}

/* Header principal T-Rex */
.main-header {{
    font-family: 'Poppins', sans-serif;
    color: {TEXT_DARK};
    text-align: center;
    padding: 2rem 0;
    background: linear-gradient(135deg, {PRIMARY} 0%, {SECONDARY} 100%);
    border-radius: 15px;
    margin-bottom: 2rem;
    box-shadow: 0 4px 20px rgba(0,0,0,0.08);
}}

.main-header h1 {{
    font-size: 2.5rem;
    font-weight: 700;
    margin-bottom: 0.5rem;
    color: {TEXT_DARK};
}}

.main-header p {{
    font-size: 1.1rem;
    color: {TEXT_LIGHT};
    margin: 0;
}}

/* Cards m√©triques */
.metric-card {{
    background: white;
    padding: 1.5rem;
    border-radius: 12px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.05);
    border-left: 4px solid {ACCENT};
    margin: 0.5rem 0;
    transition: transform 0.2s ease;
}}

.metric-card:hover {{
    transform: translateY(-2px);
    box-shadow: 0 4px 20px rgba(0,0,0,0.1);
}}

/* Bulles d'insights */
.insight-bubble {{
    background: {SECONDARY};
    padding: 1rem 1.5rem;
    border-radius: 20px;
    margin: 0.5rem 0;
    border: 1px solid {PRIMARY};
    font-family: 'Poppins', sans-serif;
    position: relative;
}}

.insight-bubble::before {{
    content: '';
    position: absolute;
    left: 15px;
    top: -5px;
    width: 10px;
    height: 10px;
    background: {SECONDARY};
    border: 1px solid {PRIMARY};
    border-bottom: none;
    border-right: none;
    transform: rotate(45deg);
}}

/* Messages T-Rex */
.trex-message {{
    background: linear-gradient(135deg, {SUCCESS} 0%, {PRIMARY} 100%);
    padding: 1rem 1.5rem;
    border-radius: 15px;
    border-left: 4px solid {ACCENT};
    margin: 1rem 0;
    font-weight: 500;
}}

.trex-success {{
    background: linear-gradient(135deg, {SUCCESS} 0%, {PRIMARY} 100%);
    border-left-color: #4CAF50;
}}

.trex-warning {{
    background: linear-gradient(135deg, {WARNING} 0%, {PRIMARY} 100%);
    border-left-color: #FF9800;
}}

.trex-error {{
    background: linear-gradient(135deg, {ERROR} 0%, {PRIMARY} 100%);
    border-left-color: #F44336;
}}

/* Sidebar style */
.css-1d391kg {{
    background: linear-gradient(180deg, {SECONDARY} 0%, {PRIMARY} 100%);
}}

/* Onglets personnalis√©s */
.stTabs [data-baseweb="tab-list"] {{
    gap: 8px;
    background: rgba(255,255,255,0.1);
    border-radius: 15px;
    padding: 0.5rem;
}}

.stTabs [data-baseweb="tab"] {{
    height: 50px;
    background: rgba(255,255,255,0.7);
    border-radius: 10px;
    color: {TEXT_DARK};
    font-weight: 500;
    border: none;
    transition: all 0.3s ease;
}}

.stTabs [aria-selected="true"] {{
    background: linear-gradient(135deg, {ACCENT} 0%, {PRIMARY} 100%);
    color: {TEXT_DARK};
    font-weight: 600;
}}

/* Footer T-Rex */
.trex-footer {{
    text-align: center;
    padding: 2rem 0;
    background: {SECONDARY};
    border-radius: 15px;
    margin-top: 2rem;
    color: {TEXT_LIGHT};
    font-size: 0.9rem;
}}

/* Buttons personnalis√©s */
.stButton > button {{
    background: linear-gradient(135deg, {ACCENT} 0%, {PRIMARY} 100%);
    color: {TEXT_DARK};
    border: none;
    border-radius: 10px;
    font-weight: 500;
    transition: all 0.3s ease;
}}

.stButton > button:hover {{
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(0,0,0,0.2);
}}

/* M√©triques Streamlit personnalis√©es */
[data-testid="metric-container"] {{
    background: white;
    border: 1px solid {PRIMARY};
    padding: 1rem;
    border-radius: 10px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.05);
}}

/* Forcer le texte sombre dans les zones pastels */
.insight-bubble,
.insight-bubble p,
.insight-bubble span,
.insight-bubble div {{
    color: {TEXT_DARK} !important;
}}

.metric-card,
.metric-card p,
.metric-card span,
.metric-card div,
.metric-card h1,
.metric-card h2,
.metric-card h3 {{
    color: {TEXT_DARK} !important;
}}

.main-header,
.main-header h1,
.main-header p {{
    color: {TEXT_DARK} !important;
}}

.trex-message,
.trex-message p,
.trex-message span,
.trex-message div {{
    color: {TEXT_DARK} !important;
}}

/* Cibler les √©l√©ments Streamlit dans les zones pastels */
.insight-bubble .stMarkdown,
.insight-bubble .stText,
.metric-card .stMarkdown,
.metric-card .stText,
.trex-message .stMarkdown,
.trex-message .stText {{
    color: {TEXT_DARK} !important;
}}

/* Zone de contenu principale plus claire */
.main .block-container {{
    background: rgba(255, 255, 255, 0.7);
    border-radius: 15px;
    padding: 2rem;
    margin-top: 1rem;
}}

/* Forcer le texte sombre sur tous les contenus markdown dans les zones pastels */
.main .block-container .stMarkdown p,
.main .block-container .stMarkdown div,
.main .block-container .stMarkdown span,
.main .block-container .stText {{
    color: {TEXT_DARK} !important;
}}
</style>
"""


def selectionner_dossier():
    """Ouvre une fen√™tre de s√©lection de dossier."""
    root = tk.Tk()
    root.withdraw()
    root.attributes("-topmost", True)
    dossier = filedialog.askdirectory(
        title="S√©lectionnez le dossier contenant vos photos"
    )
    root.destroy()
    return dossier


def extract_photo_data(organiseur: OrganisateurPhotos) -> pd.DataFrame:
    """Extrait les donn√©es des photos."""
    photos_data = []
    extensions = {".jpg", ".jpeg", ".png"}

    # Parcourir tous les dossiers du projet (source + dossiers mensuels)
    for dossier in organiseur.dossier_racine.iterdir():
        if dossier.is_dir():
            for fichier in dossier.iterdir():
                if fichier.is_file() and fichier.suffix.lower() in extensions:
                    # R√©utiliser la m√©thode existante pour extraire la date
                    date_photo = organiseur.extraire_date_nom_fichier(fichier.name)

                    if date_photo and date_photo >= organiseur.date_naissance:
                        # R√©utiliser la m√©thode existante pour calculer l'√¢ge
                        age_mois = organiseur.calculer_age_mois(date_photo)

                        photos_data.append(
                            {
                                "fichier": fichier.name,
                                "date": date_photo,
                                "age_mois": age_mois,
                                "dossier": dossier.name,
                                "jour_semaine": date_photo.strftime("%A"),
                                "semaine": date_photo.isocalendar()[1],
                                "annee": date_photo.year,
                            }
                        )

    return pd.DataFrame(photos_data)


def calculate_metrics(df: pd.DataFrame) -> Dict:
    """Calcule toutes les m√©triques pour l'onglet Analytics."""
    if df.empty:
        return {
            "total_photos": 0,
            "periode_couverte": 0,
            "moyenne_par_mois": 0,
            "derniere_photo": None,
            "jour_record": 0,
            "max_gap": 0,
        }

    # M√©triques de base
    total_photos = len(df)
    periode_couverte = df["age_mois"].max() + 1 if not df.empty else 0
    moyenne_par_mois = total_photos / periode_couverte if periode_couverte > 0 else 0

    # Date de la derni√®re photo
    derniere_photo = df["date"].max()

    # Jour record
    photos_par_jour = df.groupby(df["date"].dt.date).size()
    jour_record = photos_par_jour.max() if not photos_par_jour.empty else 0

    # Plus long gap
    dates_uniques = sorted(df["date"].dt.date.unique())
    max_gap = 0
    if len(dates_uniques) > 1:
        for i in range(1, len(dates_uniques)):
            gap = (dates_uniques[i] - dates_uniques[i - 1]).days
            max_gap = max(max_gap, gap)

    return {
        "total_photos": total_photos,
        "periode_couverte": periode_couverte,
        "moyenne_par_mois": moyenne_par_mois,
        "derniere_photo": derniere_photo,
        "jour_record": jour_record,
        "max_gap": max_gap,
    }


def find_gaps(
    df: pd.DataFrame, min_gap_days: int = 5
) -> List[Tuple[datetime, datetime, int]]:
    """Trouve les gaps temporels dans les photos."""
    if df.empty:
        return []

    dates_uniques = sorted(df["date"].dt.date.unique())
    gaps = []

    for i in range(1, len(dates_uniques)):
        gap_days = (dates_uniques[i] - dates_uniques[i - 1]).days
        if gap_days >= min_gap_days:
            gaps.append((dates_uniques[i - 1], dates_uniques[i], gap_days))

    return gaps


def generate_insights(
    df: pd.DataFrame, metrics: Dict, date_naissance: datetime
) -> List[str]:
    """G√©n√®re les messages d'insights contextuels."""
    insights = []

    if df.empty:
        return ["Aucune photo analys√©e pour le moment üì∏"]

    # Messages encourageants
    if metrics["total_photos"] > 100:
        insights.append(
            f"üéâ Magnifique collection de {metrics['total_photos']} photos!"
        )
    elif metrics["total_photos"] > 50:
        insights.append(f"üì∏ Belle collection de {metrics['total_photos']} photos!")

    # Analyse des mois les plus photographi√©s
    photos_par_mois = df.groupby("age_mois").size()
    if not photos_par_mois.empty:
        mois_champion = photos_par_mois.idxmax()
        nb_photos_champion = photos_par_mois.max()

        # Convertir l'√¢ge en nom de mois calendaire
        mois_nom = age_to_month_name(mois_champion, date_naissance)

        insights.append(
            f"üèÜ P√©riode record : {mois_champion}-{mois_champion+1} mois ({mois_nom}) avec {nb_photos_champion} photos!"
        )

    # Analyse des jours de la semaine
    photos_par_jour_semaine = df.groupby("jour_semaine").size()
    if not photos_par_jour_semaine.empty:
        jour_favori = photos_par_jour_semaine.idxmax()
        if jour_favori in ["Saturday", "Sunday"]:
            insights.append("üìÖ Vous capturez bien les week-ends en famille!")
        elif jour_favori == "Sunday":
            insights.append("üåÖ Champion du dimanche!")

    # Record de photos en une journ√©e
    if metrics["jour_record"] >= 10:
        # Trouver la date du record
        photos_par_jour = df.groupby(df["date"].dt.date).size()
        date_record = photos_par_jour.idxmax()

        insights.append(
            f"üì∏ Mode rafale activ√© ! Record : {metrics['jour_record']} photos le {date_record.strftime('%d/%m/%Y')}!"
        )
    elif metrics["jour_record"] >= 5:
        # Trouver la date du record
        photos_par_jour = df.groupby(df["date"].dt.date).size()
        date_record = photos_par_jour.idxmax()

        insights.append(
            f"üì∑ Journ√©e productive : {metrics['jour_record']} photos le {date_record.strftime('%d/%m/%Y')}!"
        )

    # Analyse des gaps
    gaps = find_gaps(df)
    if gaps:
        gap_le_plus_long = max(gaps, key=lambda x: x[2])
        if gap_le_plus_long[2] >= 10:
            insights.append(
                f"‚ö†Ô∏è Plus long silence : {gap_le_plus_long[2]} jours entre le {gap_le_plus_long[0].strftime('%d/%m')} et le {gap_le_plus_long[1].strftime('%d/%m')}"
            )

    # R√©gularit√© r√©cente
    if not df.empty:
        photos_recentes = df[df["date"] >= (datetime.now() - timedelta(days=30))]
        if len(photos_recentes) == 0:
            insights.append("üí° Pensez √† prendre quelques photos r√©centes!")
        elif len(photos_recentes) >= 20:
            insights.append("üî• Tr√®s actif ce mois-ci!")

    # Projection future
    if metrics["moyenne_par_mois"] > 0:
        projection_annuelle = metrics["moyenne_par_mois"] * 12
        insights.append(
            f"üìà √Ä ce rythme, vous aurez ~{int(projection_annuelle)} photos par an!"
        )

    # 2. D√©tection de moments sp√©ciaux üéâ (sans doublons avec jour_record)
    special_moments = detect_special_moments(df, metrics["jour_record"])
    insights.extend(special_moments)

    # 3. Comparaisons temporelles üìä (sans doublons avec analyse weekends existante)
    temporal_comparisons = generate_temporal_comparisons(df, date_naissance)
    insights.extend(temporal_comparisons)

    return insights


def detect_special_moments(df: pd.DataFrame, jour_record_existant: int) -> List[str]:
    """D√©tecte les moments sp√©ciaux bas√©s sur les pics de photos (√©vite doublons avec jour_record)."""
    special_insights = []

    if df.empty:
        return special_insights

    # Analyser les pics de photos par jour (√©viter doublon avec jour_record d√©j√† trait√©)
    photos_par_jour = df.groupby(df["date"].dt.date).size()
    moyenne_quotidienne = photos_par_jour.mean()
    seuil_pic = max(moyenne_quotidienne * 2, 8)  # Seuil adaptatif

    pics = photos_par_jour[photos_par_jour >= seuil_pic]

    if len(pics) > 1:  # Plusieurs √©v√©nements sp√©ciaux d√©tect√©s
        # Afficher quelques dates d'exemple (max 3)
        dates_exemples = sorted(pics.index)[:3]
        dates_str = ", ".join([d.strftime("%d/%m") for d in dates_exemples])
        if len(pics) > 3:
            dates_str += "..."

        special_insights.append(
            f"üéâ {len(pics)} √©v√©nements sp√©ciaux d√©tect√©s ({dates_str})"
        )

        # Suggestions d'√©v√©nements selon les pics avec date du pic maximum
        pic_max = pics.max()
        date_pic_max = pics.idxmax()

        if pic_max >= 25:
            special_insights.append(
                f"üéä √âv√©nement majeur le {date_pic_max.strftime('%d/%m/%Y')} - Premi√®res vacances ? Visite famille ?"
            )
        elif pic_max >= 15:
            special_insights.append(
                f"üéà Belle journ√©e le {date_pic_max.strftime('%d/%m/%Y')} - Sortie familiale ? Premier anniversaire ?"
            )

    # D√©tection de s√©ries de photos (plusieurs jours cons√©cutifs avec beaucoup de photos)
    dates_pics = sorted(pics.index)
    if len(dates_pics) >= 2:
        for i in range(1, len(dates_pics)):
            if (dates_pics[i] - dates_pics[i - 1]).days <= 3:  # 3 jours max
                date_debut = dates_pics[i - 1]
                date_fin = dates_pics[i]
                special_insights.append(
                    f"üèñÔ∏è P√©riode intensive {date_debut.strftime('%d/%m')} - {date_fin.strftime('%d/%m')} - Vacances ou √©v√©nement ?"
                )
                break  # Une seule fois

    return special_insights


def age_to_month_name(age_mois: int, date_naissance: datetime) -> str:
    """Convertit un √¢ge en mois vers le nom du mois calendaire correspondant."""
    mois_cible = date_naissance + timedelta(
        days=age_mois * 30.44
    )  # 30.44 jours par mois en moyenne
    mois_noms = [
        "Janvier",
        "F√©vrier",
        "Mars",
        "Avril",
        "Mai",
        "Juin",
        "Juillet",
        "Ao√ªt",
        "Septembre",
        "Octobre",
        "Novembre",
        "D√©cembre",
    ]
    return mois_noms[mois_cible.month - 1]


def generate_temporal_comparisons(
    df: pd.DataFrame, date_naissance: datetime
) -> List[str]:
    """G√©n√®re des comparaisons temporelles (√©vite doublons avec analyse weekends existante)."""
    comparisons = []

    if df.empty:
        return comparisons

    # 1. Comparaisons mois par mois (√©volution)
    photos_par_mois = df.groupby("age_mois").size()

    if len(photos_par_mois) >= 2:
        # √âvolution entre premier et dernier mois
        premier_mois = photos_par_mois.index.min()
        dernier_mois = photos_par_mois.index.max()

        if dernier_mois - premier_mois >= 2:  # Au moins 2 mois d'√©cart
            photos_premier = photos_par_mois.loc[premier_mois]
            photos_dernier = photos_par_mois.loc[dernier_mois]

            premier_nom = age_to_month_name(premier_mois, date_naissance)
            dernier_nom = age_to_month_name(dernier_mois, date_naissance)

            if photos_premier > 0:
                evolution = ((photos_dernier - photos_premier) / photos_premier) * 100
                if evolution > 50:
                    comparisons.append(
                        f"üìà √âvolution croissante : +{evolution:.0f}% entre {premier_nom} et {dernier_nom}"
                    )
                elif evolution < -40:
                    comparisons.append(
                        f"üìâ √âvolution : {evolution:.0f}% entre {premier_nom} et {dernier_nom}"
                    )

        # Comparaison des 2 mois les plus contrast√©s
        if len(photos_par_mois) >= 3:
            mois_min = photos_par_mois.idxmin()
            mois_max = photos_par_mois.idxmax()
            photos_min = photos_par_mois.min()
            photos_max = photos_par_mois.max()

            mois_min_nom = age_to_month_name(mois_min, date_naissance)
            mois_max_nom = age_to_month_name(mois_max, date_naissance)

            if photos_min > 0 and mois_min != mois_max:
                ratio = photos_max / photos_min
                if ratio >= 2:
                    comparisons.append(
                        f"üìä Contraste : {mois_max_nom} vs {mois_min_nom} = {ratio:.1f}x plus de photos"
                    )

    # 2. Comparaison week-end vs semaine avec RATIOS PR√âCIS (compl√©ment de l'existant)
    photos_weekends = df[df["jour_semaine"].isin(["Saturday", "Sunday"])].shape[0]
    photos_semaine = df[~df["jour_semaine"].isin(["Saturday", "Sunday"])].shape[0]

    if photos_weekends > 0 and photos_semaine > 0:
        # Ratio par jour (weekend = 2 jours, semaine = 5 jours)
        ratio_weekend_par_jour = photos_weekends / 2
        ratio_semaine_par_jour = photos_semaine / 5

        if ratio_semaine_par_jour > 0:
            multiplicateur = ratio_weekend_par_jour / ratio_semaine_par_jour

            # Seulement si tr√®s marqu√© (√©viter doublon avec message existant)
            if multiplicateur >= 3:
                comparisons.append(
                    f"üéØ Weekend intense : {multiplicateur:.1f}x plus de photos par jour le weekend"
                )
            elif multiplicateur <= 0.4:
                comparisons.append(
                    f"üíº Semaine active : {1/multiplicateur:.1f}x plus de photos par jour en semaine"
                )

    # 3. Tendance sur les derniers mois
    if len(photos_par_mois) >= 3:
        derniers_3_mois = photos_par_mois.tail(3)

        # Calculer la tendance (r√©gression simple)
        valeurs = list(derniers_3_mois.values)
        if len(valeurs) == 3:
            tendance = (valeurs[2] - valeurs[0]) / 2  # Pente moyenne
            if tendance > 8:
                comparisons.append(
                    "üìà Tendance r√©cente : Vous photographiez de plus en plus votre ü¶ñ"
                )
            elif tendance < -8:
                comparisons.append(
                    "üìâ Tendance r√©cente : Moins de photos - normal quand ü¶ñ grandit!"
                )

    return comparisons


def create_charts(df: pd.DataFrame):
    """Cr√©e tous les graphiques pour l'onglet Analytics avec palette T-Rex Pastel."""
    charts = {}

    if df.empty:
        return charts

    # üé® Configuration T-Rex Pastel pour Plotly
    trex_colors = [PRIMARY, ACCENT, SUCCESS, WARNING, SECONDARY]

    # 1. Graphique en barres : Photos par mois d'√¢ge
    photos_par_mois = df.groupby("age_mois").size().reset_index(name="nb_photos")
    fig_barres = px.bar(
        photos_par_mois,
        x="age_mois",
        y="nb_photos",
        title="ü¶ñ √âvolution des photos par mois d'√¢ge",
        labels={"age_mois": "√Çge du T-Rex (mois)", "nb_photos": "Nombre de photos"},
        color="nb_photos",
        color_continuous_scale=[[0, SUCCESS], [0.5, PRIMARY], [1, ACCENT]],
    )
    fig_barres.update_layout(
        showlegend=False,
        font=dict(family="Poppins, sans-serif", color=TEXT_DARK),
        plot_bgcolor="rgba(0,0,0,0)",
        paper_bgcolor="rgba(0,0,0,0)",
    )
    fig_barres.update_xaxes(title="√Çge du b√©b√© (mois)", gridcolor=PRIMARY)
    fig_barres.update_yaxes(title="Nombre de photos", gridcolor=PRIMARY)
    charts["barres"] = fig_barres

    # 2. Timeline : √âvolution hebdomadaire
    df["semaine_annee"] = df["date"].dt.strftime("%Y-W%U")
    photos_par_semaine = (
        df.groupby("semaine_annee").size().reset_index(name="nb_photos")
    )

    fig_timeline = px.line(
        photos_par_semaine,
        x="semaine_annee",
        y="nb_photos",
        title="ü¶ñ Timeline : Activit√© hebdomadaire",
        labels={"semaine_annee": "Semaine", "nb_photos": "Nombre de photos"},
        color_discrete_sequence=[ACCENT],
    )
    fig_timeline.update_layout(
        font=dict(family="Poppins, sans-serif", color=TEXT_DARK),
        plot_bgcolor="rgba(0,0,0,0)",
        paper_bgcolor="rgba(0,0,0,0)",
    )
    fig_timeline.update_xaxes(tickangle=45, title="Semaine", gridcolor=PRIMARY)
    fig_timeline.update_yaxes(title="Nombre de photos", gridcolor=PRIMARY)
    fig_timeline.update_traces(line_width=3)
    charts["timeline"] = fig_timeline

    # 3. Heatmap : R√©partition par jour de la semaine
    jours_ordre = [
        "Monday",
        "Tuesday",
        "Wednesday",
        "Thursday",
        "Friday",
        "Saturday",
        "Sunday",
    ]
    jours_fr = ["Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi", "Samedi", "Dimanche"]

    photos_par_jour = (
        df.groupby("jour_semaine").size().reindex(jours_ordre, fill_value=0)
    )

    # Cr√©er une colorscale T-Rex pastel custom
    trex_colorscale = [[0.0, SUCCESS], [0.5, PRIMARY], [1.0, ACCENT]]

    fig_heatmap = go.Figure(
        data=go.Heatmap(
            z=[photos_par_jour.values],
            x=jours_fr,
            y=["ü¶ñ Activit√©"],
            colorscale=trex_colorscale,
            showscale=True,
            text=[photos_par_jour.values],
            texttemplate="%{text}",
            textfont={"size": 14, "color": TEXT_DARK},
        )
    )
    fig_heatmap.update_layout(
        title="ü¶ñ Heatmap : Jours favoris",
        xaxis_title="Jour de la semaine",
        yaxis_title="",
        height=200,
        font=dict(family="Poppins, sans-serif", color=TEXT_DARK),
        plot_bgcolor="rgba(0,0,0,0)",
        paper_bgcolor="rgba(0,0,0,0)",
    )
    charts["heatmap"] = fig_heatmap

    return charts


def main():
    # ü¶ñ Configuration T-Rex Pastel
    st.set_page_config(
        page_title="ü¶ñ MomentKeeper",
        page_icon="ü¶ñ",
        layout="wide",
        initial_sidebar_state="collapsed",
    )

    # üé® Appliquer le CSS custom
    st.markdown(TREX_CSS, unsafe_allow_html=True)

    # ü¶ñ Header principal avec style T-Rex
    st.markdown(
        """
        <div class="main-header">
            <h1>ü¶ñ MomentKeeper</h1>
            <p><strong>Du Chaos √† la Chronologie</strong></p>
            <p>Organisez vos photos de ü¶ñ (b√©b√©) par mois d'√¢ge et d√©couvrez vos habitudes photo</p>
        </div>
    """,
        unsafe_allow_html=True,
    )

    # Initialiser la session state
    if "dossier_path" not in st.session_state:
        st.session_state.dossier_path = ""

    with st.sidebar:
        st.header("Configuration")

        st.subheader("üìÅ Dossier racine")
        col1, col2 = st.columns([1, 3])
        with col1:
            if st.button("üìÅ", help="Parcourir", key="browse_root"):
                dossier_selectionne = selectionner_dossier()
                if dossier_selectionne:
                    st.session_state.dossier_path = dossier_selectionne
                    st.rerun()

        with col2:
            dossier_racine = st.text_input(
                "Dossier racine du projet",
                placeholder="C:/Users/Nom/ProjetPhotos",
                value=st.session_state.dossier_path,
                label_visibility="collapsed",
            )
            # Mettre √† jour la session state si l'utilisateur tape directement
            if dossier_racine != st.session_state.dossier_path:
                st.session_state.dossier_path = dossier_racine

        st.subheader("üì∏ Sous-dossier photos")
        col3, col4 = st.columns([1, 3])
        with col3:
            if st.button("üìÅ", help="Parcourir sous-dossier", key="browse_sub"):
                if dossier_racine and Path(dossier_racine).exists():
                    dossier_selectionne = selectionner_dossier()
                    if dossier_selectionne:
                        # Extraire seulement le nom du sous-dossier relatif au dossier racine
                        try:
                            chemin_relatif = Path(dossier_selectionne).relative_to(
                                Path(dossier_racine)
                            )
                            st.session_state.sous_dossier_photos = str(chemin_relatif)
                            st.rerun()
                        except ValueError:
                            st.error(
                                "Le dossier s√©lectionn√© doit √™tre dans le dossier racine"
                            )
                else:
                    st.error("S√©lectionnez d'abord le dossier racine")

        with col4:
            # Initialiser la session state pour le sous-dossier
            if "sous_dossier_photos" not in st.session_state:
                st.session_state.sous_dossier_photos = "photos"

            sous_dossier_photos = st.text_input(
                "Nom du sous-dossier contenant les photos",
                value=st.session_state.sous_dossier_photos,
                help="Nom du dossier dans le dossier racine qui contient les photos √† organiser",
                label_visibility="collapsed",
            )
            # Mettre √† jour la session state si l'utilisateur tape directement
            if sous_dossier_photos != st.session_state.sous_dossier_photos:
                st.session_state.sous_dossier_photos = sous_dossier_photos

        date_naissance = st.date_input(
            "ü¶ñ Date de naissance",
            min_value=datetime(2000, 1, 1).date(),
            max_value=datetime.now().date(),
        )

        if st.button(
            "üîÑ R√©initialiser", help="Remet toutes les photos dans le dossier photos"
        ):
            if dossier_racine and Path(dossier_racine).exists():
                organiseur = OrganisateurPhotos(
                    Path(dossier_racine),
                    sous_dossier_photos,
                    datetime.combine(date_naissance, datetime.min.time()),
                )
                nb_fichiers, erreurs = organiseur.reinitialiser()

                if nb_fichiers > 0:
                    st.success(
                        f"‚úÖ {nb_fichiers} fichiers remis dans le dossier photos"
                    )
                if erreurs:
                    st.error("‚ùå Erreurs rencontr√©es:")
                    for erreur in erreurs:
                        st.error(erreur)

    if dossier_racine and Path(dossier_racine).exists():
        dossier_photos_complet = Path(dossier_racine) / sous_dossier_photos
        if dossier_photos_complet.exists():
            organiseur = OrganisateurPhotos(
                Path(dossier_racine),
                sous_dossier_photos,
                datetime.combine(date_naissance, datetime.min.time()),
            )

            tab1, tab2, tab3, tab4 = st.tabs(
                [
                    "üîç Simulation",
                    "üóÇÔ∏è Organisation",
                    "üìä Analytics",
                    "ü¶ñ Insights",  # T-Rex pour les d√©couvertes
                ]
            )

            with tab1:
                st.markdown(
                    '<div class="trex-message">ü¶ñ <strong>Simulation de l\'organisation</strong><br>Pr√©visualisez sans d√©placer vos fichiers !</div>',
                    unsafe_allow_html=True,
                )

                if st.button("ü¶ñ Analyser les photos"):
                    with st.spinner("ü¶ñ Analyse vos photos..."):
                        repartition, erreurs = organiseur.simuler_organisation()

                    if repartition:
                        total_photos = sum(len(f) for f in repartition.values())
                        st.markdown(
                            f'<div class="trex-success">ü¶ñ Rawr de satisfaction ! {total_photos} photos analys√©es et pr√™tes √† √™tre organis√©es !</div>',
                            unsafe_allow_html=True,
                        )

                        for dossier, fichiers in sorted(repartition.items()):
                            with st.expander(f"üìÅ {dossier} ({len(fichiers)} photos)"):
                                for fichier in fichiers[:10]:
                                    st.text(f"  üì∏ {fichier.name}")
                                if len(fichiers) > 10:
                                    st.text(f"  ... et {len(fichiers) - 10} autres")
                    else:
                        st.info("‚ÑπÔ∏è Aucune photo trouv√©e √† organiser")

                        # Afficher des informations de d√©bogage
                        if (
                            hasattr(organiseur, "_fichiers_ignores")
                            and organiseur._fichiers_ignores
                        ):
                            with st.expander("üîç D√©tails de l'analyse"):
                                st.write(
                                    f"Date de naissance configur√©e : {date_naissance}"
                                )
                                st.write(
                                    f"Nombre de fichiers ignor√©s : {len(organiseur._fichiers_ignores)}"
                                )

                                # Afficher quelques exemples
                                for nom, raison in organiseur._fichiers_ignores[:5]:
                                    st.text(f"  - {nom}: {raison}")

                                if len(organiseur._fichiers_ignores) > 5:
                                    st.text(
                                        f"  ... et {len(organiseur._fichiers_ignores) - 5} autres"
                                    )

                    if erreurs:
                        st.warning("‚ö†Ô∏è Avertissements:")
                        for erreur in erreurs:
                            st.warning(erreur)

            with tab2:
                st.markdown(
                    '<div class="trex-message">üóÇÔ∏è <strong>Organisation r√©elle</strong><br>Temps de passer √† l\'action !</div>',
                    unsafe_allow_html=True,
                )
                st.markdown(
                    '<div class="trex-warning">ü¶ñ Attention petits bras ! Cette action d√©placera r√©ellement vos fichiers.</div>',
                    unsafe_allow_html=True,
                )

                col1, col2 = st.columns(2)
                with col1:
                    confirmer = st.checkbox("Je confirme vouloir organiser mes photos")

                with col2:
                    if st.button("ü¶ñ Organiser", disabled=not confirmer):
                        with st.spinner("ü¶ñ Petits bras en action..."):
                            nb_fichiers, erreurs = organiseur.organiser()

                        if nb_fichiers > 0:
                            st.markdown(
                                f'<div class="trex-success">ü¶ñ Rawr de victoire ! {nb_fichiers} photos parfaitement organis√©es !</div>',
                                unsafe_allow_html=True,
                            )

                        if erreurs:
                            st.error("‚ùå Erreurs rencontr√©es:")
                            for erreur in erreurs:
                                st.error(erreur)

            with tab3:
                st.markdown(
                    '<div class="trex-message">üìä <strong>Analytics</strong><br>ü¶ñ D√©couvrez les statistiques de votre petit explorateur !</div>',
                    unsafe_allow_html=True,
                )

                # Extraire les donn√©es des photos
                with st.spinner("ü¶ñ Calcul des statistiques en cours..."):
                    df_photos = extract_photo_data(organiseur)
                    metrics = calculate_metrics(df_photos)

                if df_photos.empty:
                    st.info("‚ÑπÔ∏è Aucune photo trouv√©e pour l'analyse")
                else:
                    # M√©triques principales en colonnes (3x2 layout)
                    col1, col2, col3 = st.columns(3)

                    with col1:
                        st.metric(
                            "ü¶ñ Photos gard√©es",
                            metrics["total_photos"],
                            delta=(
                                "Petits souvenirs pr√©cieux !"
                                if metrics["total_photos"] > 0
                                else None
                            ),
                        )
                        st.metric(
                            "üìÖ Derni√®re capture",
                            (
                                metrics["derniere_photo"].strftime("%d/%m/%Y")
                                if metrics["derniere_photo"]
                                else "N/A"
                            ),
                            delta="R√©cente !" if metrics["derniere_photo"] else None,
                        )

                    with col2:
                        st.metric(
                            "üóìÔ∏è Croissance",
                            f"{metrics['periode_couverte']} mois",
                            delta=(
                                "√áa grandit vite !"
                                if metrics["periode_couverte"] > 6
                                else None
                            ),
                        )
                        st.metric(
                            "üèÜ Record quotidien",
                            f"{metrics['jour_record']} photos",
                            delta=(
                                "Mode rafale !"
                                if metrics["jour_record"] >= 10
                                else None
                            ),
                        )

                    with col3:
                        st.metric(
                            "üìà Rythme",
                            f"{metrics['moyenne_par_mois']:.1f}/mois",
                            delta=(
                                "R√©gulier !"
                                if metrics["moyenne_par_mois"] >= 20
                                else "On peut faire mieux"
                            ),
                        )
                        st.metric(
                            "‚è±Ô∏è Plus long silence",
                            f"{metrics['max_gap']} jours",
                            delta=(
                                "T-Rex endormi ?"
                                if metrics["max_gap"] >= 7
                                else "Bien suivi !"
                            ),
                        )

                    st.divider()

                    # Graphiques
                    charts = create_charts(df_photos)

                    if charts:
                        # Graphique en barres
                        if "barres" in charts:
                            st.plotly_chart(charts["barres"], use_container_width=True)

                        # Timeline et heatmap en colonnes
                        col1, col2 = st.columns(2)

                        with col1:
                            if "timeline" in charts:
                                st.plotly_chart(
                                    charts["timeline"], use_container_width=True
                                )

                        with col2:
                            if "heatmap" in charts:
                                st.plotly_chart(
                                    charts["heatmap"], use_container_width=True
                                )

                        # Alertes visuelles pour les gaps
                        gaps = find_gaps(df_photos)
                        if gaps:
                            st.subheader("‚ö†Ô∏è Alertes temporelles")
                            for gap_start, gap_end, gap_days in gaps:
                                if gap_days >= 5:
                                    st.warning(
                                        f"Gap de {gap_days} jours : du {gap_start.strftime('%d/%m/%Y')} au {gap_end.strftime('%d/%m/%Y')}"
                                    )

            with tab4:
                st.markdown(
                    '<div class="trex-message">ü¶ñ <strong>Insights</strong><br>D√©couvertes sur vos habitudes photo !</div>',
                    unsafe_allow_html=True,
                )

                # R√©utiliser les donn√©es d√©j√† extraites si possible
                if "df_photos" not in locals():
                    with st.spinner("ü¶ñ Fouille dans vos donn√©es..."):
                        df_photos = extract_photo_data(organiseur)
                        metrics = calculate_metrics(df_photos)

                # Messages d'insights
                insights = generate_insights(
                    df_photos, metrics, organiseur.date_naissance
                )

                if insights:
                    st.markdown("### üéØ D√©couvertes")
                    for insight in insights:
                        st.markdown(
                            f'<div class="insight-bubble">{insight}</div>',
                            unsafe_allow_html=True,
                        )

                    st.divider()

                    # Section d√©tails si il y a des donn√©es
                    if not df_photos.empty:
                        st.subheader("üìã Analyse d√©taill√©e")

                        col1, col2 = st.columns(2)

                        with col1:
                            st.write("**üóìÔ∏è R√©partition mensuelle**")
                            photos_par_mois = df_photos.groupby("age_mois").size()
                            for mois, nb in photos_par_mois.head(5).items():
                                st.write(f"‚Ä¢ {mois}-{mois+1} mois : {nb} photos")
                            if len(photos_par_mois) > 5:
                                st.write(
                                    f"... et {len(photos_par_mois) - 5} autres mois"
                                )

                        with col2:
                            st.write("**üìÖ Jours favoris**")
                            jours_fr_map = {
                                "Monday": "Lundi",
                                "Tuesday": "Mardi",
                                "Wednesday": "Mercredi",
                                "Thursday": "Jeudi",
                                "Friday": "Vendredi",
                                "Saturday": "Samedi",
                                "Sunday": "Dimanche",
                            }
                            photos_par_jour = (
                                df_photos.groupby("jour_semaine")
                                .size()
                                .sort_values(ascending=False)
                            )
                            for jour_en, nb in photos_par_jour.head(3).items():
                                jour_fr = jours_fr_map.get(jour_en, jour_en)
                                st.write(f"‚Ä¢ {jour_fr} : {nb} photos")

                        # Suggestions d'am√©lioration
                        st.subheader("üí° Suggestions")

                        gaps = find_gaps(df_photos, min_gap_days=7)
                        if gaps:
                            st.write("üì∏ **Pour ne rien rater :**")
                            st.write(
                                "‚Ä¢ Pensez √† prendre des photos pendant la semaine aussi"
                            )
                            st.write("‚Ä¢ Essayez de capturer les moments du quotidien")

                        if metrics["moyenne_par_mois"] < 10:
                            st.write("üìà **Pour enrichir vos souvenirs :**")
                            st.write(
                                "‚Ä¢ Quelques photos de plus par mois donneraient un bel aper√ßu de l'√©volution"
                            )
                            st.write(
                                "‚Ä¢ Les petits moments comptent autant que les grands!"
                            )
                else:
                    st.info("Analysez d'abord vos photos pour voir les insights!")
        else:
            st.error(
                f"‚ùå Le dossier photos '{sous_dossier_photos}' n'existe pas dans {dossier_racine}"
            )
    else:
        if dossier_racine:
            st.error("‚ùå Le dossier racine sp√©cifi√© n'existe pas")
        else:
            st.info("üëà Configurez le dossier racine dans la barre lat√©rale")

    # ü¶ñ Footer T-Rex avec personnalit√©
    st.markdown(
        """
        <div class="trex-footer">
            <p>Cr√©√© avec ‚ù§Ô∏è pour un ü¶ñ aux petits bras mais au grand c≈ìur</p>
            <p><strong>ü¶ñ MomentKeeper v1.0</strong> - Organisateur T-Rex Pastel</p>
            <p><em>"Du Chaos √† la Chronologie, une photo √† la fois"</em></p>
        </div>
    """,
        unsafe_allow_html=True,
    )


if __name__ == "__main__":
    main()
